plugins {
    id 'java'
    id 'fabric-loom'
    id 'maven-publish'
    id "com.diffplug.gradle.spotless" version "4.3.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "org.sonarqube" version "2.8"
    id "jacoco"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
    maven {
        name = "HYWLA"
        url = "https://maven.tehnut.info/"
        content {
            includeGroup "mcp.mobius.waila"
        }
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    options.deprecation = false
}

// ensure everything uses UTF-8 and not some random codepage chosen by gradle
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Create version number
ext.pr = System.getenv('PR_NUMBER') ?: ""
if (ext.pr) {
  version = version + "+pr." + ext.pr
}

ext.branch = System.getenv('BRANCH') ?: ""
if (ext.branch) {
  version = version + "+branch." + ext.branch
}

ext.tag = System.getenv('TAG') ?: ""
if (ext.tag && ext.tag.startsWith("fabric/v")) {
  version = ext.tag.substring("fabric/v".length())
  // Validate that the rest is a semver version
  if (version ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/) {
    println("::set-env name=VERSION::${version}")
  } else {
    throw new GradleException("Invalid semver: $version")
  }
}

// Maven group and artifact name
group = artifact_group
archivesBaseName = artifact_basename

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    datagen {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    additions {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    tools {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    generators {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    defense {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compileClasspath)
    datagenCompile.extendsFrom(compileClasspath)
    additionsCompile.extendsFrom(compileClasspath)
    toolsCompile.extendsFrom(compileClasspath)
    generatorsCompile.extendsFrom(compileClasspath)
    defenseCompile.extendsFrom(compileClasspath)
}

apply from: 'gradle/scripts/spotless.gradle'

minecraft {
    accessWidener "src/main/resources/mekanism.accesswidener"
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "alexiil.mc.lib:libblockattributes-core:${libblockattributes_version}"
    modImplementation "alexiil.mc.lib:libblockattributes-items:${libblockattributes_version}"
    modImplementation "alexiil.mc.lib:libblockattributes-fluids:${libblockattributes_version}"
    include "alexiil.mc.lib:libblockattributes-core:${libblockattributes_version}"
    include "alexiil.mc.lib:libblockattributes-items:${libblockattributes_version}"
    include "alexiil.mc.lib:libblockattributes-fluids:${libblockattributes_version}"

    // Energy API
    modApi "teamreborn:energy:${tr_energy_version}"
    include "teamreborn:energy:${tr_energy_version}"

    modCompileOnly("me.shedaniel:RoughlyEnoughItems:${project.reiVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntime("me.shedaniel:RoughlyEnoughItems:${project.reiVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntime("TechReborn:TechReborn-1.16:${project.techRebornVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modCompileOnly("mcp.mobius.waila:Hwyla:${project.wailaVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntime("mcp.mobius.waila:Hwyla:${project.wailaVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modCompileOnly("io.github.prospector:modmenu:${project.modmenuVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntime("io.github.prospector:modmenu:${project.modmenuVersion}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.ccVersion}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.ccVersion}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${project.ccVersion}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:${project.ccVersion}"

    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.ccVersion}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${project.ccVersion}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:${project.ccVersion}"

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // unit test dependencies
    testCompile "junit:junit:4.13"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

apply from: 'gradle/scripts/artifacts.gradle'
apply from: 'gradle/scripts/curseforge.gradle'

// configure the maven publication
publishing {
    if (!version.endsWith("-SNAPSHOT")) {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = 'appliedenergistics2-fabric'
                version = project.version

                // add all the jars that should be included when publishing to maven
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
                artifact javadocJar
                artifact apiJar
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("GITHUB_ACTOR")
                password System.getenv("GITHUB_TOKEN")
            }
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2"
        }
        maven {
            credentials {
                username System.getenv("MODMAVEN_USER")
                password System.getenv("MODMAVEN_PASSWORD")
            }
            name = "modmaven"
            url = "https://modmaven.k-4u.nl/artifactory/local-releases/"
        }
    }

}

import net.fabricmc.loom.task.RunClientTask;

task generateData(type: RunClientTask, dependsOn: downloadAssets, group: "Mekanism", description: "Generates various JSON assets for the mod") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.datagen.output
    systemProperty "appeng.generateData", "true"
}
build.dependsOn generateData

task runAdditions(type: RunClientTask, dependsOn: downloadAssets, group: "Mekanism", description: "Export game assets for the website") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.additions.output
}
task runTools(type: RunClientTask, dependsOn: downloadAssets, group: "Mekanism", description: "Export game assets for the website") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.tools.output
}
task runGenerators(type: RunClientTask, dependsOn: downloadAssets, group: "Mekanism", description: "Export game assets for the website") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.generators.output
}
task runDefense(type: RunClientTask, dependsOn: downloadAssets, group: "Mekanism", description: "Export game assets for the website") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.defense.output
}